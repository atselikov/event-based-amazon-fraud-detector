AWSTemplateFormatVersion: 2010-09-09
Description: With this CFT you'll be able to install all relevant resources needed to setup your event based solution.
Parameters:
  S3SourceBucket:
    Description: S3 Source Bucket
    Type: String
    AllowedPattern: ^[a-zA-Z0-9-]*$
  DetectorName:
    Description: S3 Source Bucket
    Type: String
    AllowedPattern: ^[a-z]*$
  DetectorEvent:
    Description: S3 Source Bucket
    Type: String
    AllowedPattern: ^[a-z]*$
  DetectorEntity:
    Description: S3 Source Bucket
    Type: String
    AllowedPattern: ^[a-z]*$
  FlowID:
    Description: Contact Flow ID
    Type: String
    AllowedPattern: ^[a-zA-Z0-9-]*$
  InstanceID:
    Description: Amazon Connect Instance ID
    Type: String
    AllowedPattern: ^[a-zA-Z0-9-]*$
  SourceNumber:
    Description: Claimed number in Amazon Connect
    Type: String
    AllowedPattern: ^[0-9+]*$
  DynamoTable:
    Description: DynamoDB Table Name
    Type: String
    AllowedPattern: ^[a-zA-Z0-9-]*$
Resources:
  SagemakerPolicy:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: SagemakerPolicy
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - s3:GetObject
              - s3:PutObject
              - s3:DeleteObject
              - s3:ListBucket
            Resource: arn:aws:s3:::*
      Roles:
        - !Ref SagemakerRole
  SagemakerRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - sagemaker.amazonaws.com
            Action: 
              - 'sts:AssumeRole'
          - Effect: Allow
            Principal:
              Service:
                - frauddetector.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/AmazonSageMakerFullAccess'
        - 'arn:aws:iam::aws:policy/AmazonFraudDetectorFullAccessPolicy'
  BlockCreditCardRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action: 
              - 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: LambdaBlockCreditCardPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - dynamodb:PutItem
                  - dynamodb:Query
                Resource:
                  - !Join [':', [ 'arn:aws:logs', !Ref AWS::Region, !Ref AWS::AccountId, '*' ] ]
                  - !Join ['', [ 'arn:aws:dynamodb:', !Ref AWS::Region, ':', !Ref AWS::AccountId, ':table/', !Ref DynamoTable, "/index/*" ] ]
                  - !Join ['', [ 'arn:aws:dynamodb:', !Ref AWS::Region, ':', !Ref AWS::AccountId, ':table/', !Ref DynamoTable ] ]
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !Join ['', [ 'arn:aws:logs:', !Ref AWS::Region, ':', !Ref AWS::AccountId, ':log-group:/aws/lambda/block-credit-card:*' ] ]
  LambdaEventRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action: 
              - 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: LambdaEventPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - dynamodb:Query
                  - connect:StartOutboundVoiceContact
                Resource:
                  - !Join [':', [ 'arn:aws:logs', !Ref AWS::Region, !Ref AWS::AccountId, '*' ] ]
                  - !Join ['', [ 'arn:aws:dynamodb:', !Ref AWS::Region, ':', !Ref AWS::AccountId, ':table/', !Ref DynamoTable, "/index/*" ] ]
                  - !Join ['', [ 'arn:aws:dynamodb:', !Ref AWS::Region, ':', !Ref AWS::AccountId, ':table/', !Ref DynamoTable ] ]
                  - !Join ['', [ 'arn:aws:connect:', !Ref AWS::Region, ':', !Ref AWS::AccountId, ':instance/', !Ref InstanceID, '/contact/*' ] ]
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !Join ['', [ 'arn:aws:logs:', !Ref AWS::Region, ':', !Ref AWS::AccountId, ':log-group:/aws/lambda/event-based-fraud-detection:*' ] ]
              - Effect: Allow
                Action:
                  - frauddetector:*
                Resource: "*"
  CFNSagemakerLifeCyclePolicy:
    Type: AWS::SageMaker::NotebookInstanceLifecycleConfig
    Properties:
        NotebookInstanceLifecycleConfigName: fraud-detection-lfc
        OnStart: 
        - Content:
            Fn::Base64:
                !Sub |
                #!/bin/bash
                sudo -u ec2-user -i <<'EOF'
                cd /home/ec2-user/SageMaker
                aws s3 cp s3://${S3SourceBucket}/fraud-detector-example/Fraud_Detector_End_to_End_Blog_Post.ipynb ./
                echo '{"ENTITY_TYPE": "${DetectorEntity}","EVENT_TYPE": "${DetectorEvent}","MODEL_NAME": "${DetectorName}_model","DETECTOR_NAME": "${DetectorName}","S3_BUCKET": "${S3SourceBucket}","S3_FILE": "cnp_example_30k.csv"}' >> config.json
                EOF
  SagemakerNotebook:
    Type: AWS::SageMaker::NotebookInstance
    Properties:
      DirectInternetAccess: Enabled
      InstanceType: ml.t3.medium
      LifecycleConfigName: fraud-detection-lfc
      NotebookInstanceName: event-based-fraud-detection
      RoleArn: !Join [ '', [ 'arn:aws:iam::', !Ref AWS::AccountId, ':role/', !Ref SagemakerRole ] ]
      RootAccess: Enabled
      VolumeSizeInGB: 10
  S3Bucket:
    Type: 'AWS::S3::Bucket'
    DeletionPolicy: Retain
    Properties:
      BucketName: !Ref S3SourceBucket
  EventPrediction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: fraud-detection
      Environment:
        Variables:
          DETECTOR_NAME: !Ref DetectorName
          EVENT_TYPE: !Ref DetectorEvent
          ENTITY_TYPE: !Ref DetectorEntity
          FLOW_ID: !Ref FlowID
          INSTANCE_ID: !Ref InstanceID
          SOURCE_NUMBER: !Ref SourceNumber
          TABLE_NAME: !Ref DynamoTable
      Code:
        S3Bucket: !Ref S3SourceBucket
        S3Key: fraud-detection.zip
      Timeout: 5
      Handler: lambda_function.lambda_handler
      Runtime: python3.8
      MemorySize: 128
      Role: !Join [ '', [ 'arn:aws:iam::', !Ref AWS::AccountId, ':role/', !Ref LambdaEventRole ] ]
  BlockCreditCard:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: block-credit-card
      Environment:
        Variables:
          TABLE_NAME: !Ref DynamoTable
      Code:
        S3Bucket: !Ref S3SourceBucket
        S3Key: block-credit-card.zip
      Timeout: 5
      Handler: lambda_function.lambda_handler
      Runtime: python3.8
      MemorySize: 128
      Role: !Join [ '', [ 'arn:aws:iam::', !Ref AWS::AccountId, ':role/', !Ref BlockCreditCardRole ] ]
  DDBTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Ref DynamoTable
      AttributeDefinitions:
        -
          AttributeName: customer_id
          AttributeType: S
        -
          AttributeName: card_number
          AttributeType: S
      KeySchema:
        -
          AttributeName: customer_id
          KeyType: HASH
        -
          AttributeName: card_number
          KeyType: RANGE
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 2